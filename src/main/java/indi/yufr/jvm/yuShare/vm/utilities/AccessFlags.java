package indi.yufr.jvm.yuShare.vm.utilities;

/**
 * @date: 2022/1/17 18:02
 * @author: farui.yu
 */
public enum AccessFlags {

    JVM_ACC_PUBLIC(0x0001), /* visible to everyone */
    JVM_ACC_PRIVATE(0x0002), /* visible only to the defining class */
    JVM_ACC_PROTECTED(0x0004), /* visible to subclasses */
    JVM_ACC_STATIC(0x0008), /* instance variable is static */
    JVM_ACC_FINAL(0x0010), /* no further subclassing, overriding */
    JVM_ACC_SYNCHRONIZED(0x0020), /* wrap method call in monitor lock */
    JVM_ACC_SUPER(0x0020), /* funky handling of invokespecial */
    JVM_ACC_VOLATILE(0x0040), /* can not cache in registers */
    JVM_ACC_BRIDGE(0x0040), /* bridge method generated by compiler */
    JVM_ACC_TRANSIENT(0x0080), /* not persistant */
    JVM_ACC_VARARGS(0x0080), /* method declared with variable number of args */
    JVM_ACC_NATIVE(0x0100), /* implemented in C */
    JVM_ACC_INTERFACE(0x0200), /* class is an interface */
    JVM_ACC_ABSTRACT(0x0400), /* no definition provided */
    JVM_ACC_STRICT(0x0800), /* strict floating point */
    JVM_ACC_SYNTHETIC(0x1000), /* compiler-generated class, method or field */
    JVM_ACC_ANNOTATION(0x2000), /* annotation type */
    JVM_ACC_ENUM(0x4000), /* field is declared as element of enum */
    ;

    private int flags;

    AccessFlags(int flags) {
        this.flags = flags;
    }

    public static AccessFlags of(short flags) {

        AccessFlags[] values = AccessFlags.values();
        for (int i = 0; i < values.length; i++) {
            AccessFlags value = values[i];
            if (value.flags == flags) {
                return value;
            }
        }

        throw new RuntimeException("无法解析flags");
    }
}
